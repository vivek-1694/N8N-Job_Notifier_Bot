{
  "name": "job_noti",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {
          "labelIds": [
            "INBOX"
          ]
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -768,
        96
      ],
      "id": "YOUR_NODE_ID",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "YOUR_GMAIL_API",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "YOUR_NODE_ID",
              "leftValue": "={{$json[\"snippet\"].toLowerCase()}}",
              "rightValue": "placement",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "YOUR_NODE_ID",
              "leftValue": "={{$json[\"snippet\"].toLowerCase()}}",
              "rightValue": "hiring",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "YOUR_NODE_ID",
              "leftValue": "={{$json[\"snippet\"].toLowerCase()}}",
              "rightValue": "intern",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "YOUR_NODE_ID",
              "leftValue": "={{$json[\"snippet\"].toLowerCase()}}",
              "rightValue": "internship",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "YOUR_NODE_ID",
              "leftValue": "={{$json[\"snippet\"].toLowerCase()}}",
              "rightValue": "opportunity",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -576,
        96
      ],
      "id": "YOUR_NODE_ID",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_NUMBER",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "job_id": "={{$json[\"job_id\"]}}",
            "subject": "={{$json[\"subject\"]}}",
            "company": "={{$json[\"company\"]}}",
            "status": "={{$json[\"status\"]}}",
            "from": "={{$json[\"from\"]}}",
            "job role": "={{$json[\"job_role\"]}}",
            "time stamp": "={{ $json.timestamp }}"
          },
          "matchingColumns": [
            "job_id"
          ],
          "schema": [
            {
              "id": "job_id",
              "displayName": "job_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "from",
              "displayName": "from",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "subject",
              "displayName": "subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job role",
              "displayName": "job role",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "time stamp",
              "displayName": "time stamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        960,
        -64
      ],
      "id": "YOUR_NODE_ID",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "=New Job Notification:\n\nJob ID: {{$json[\"job_id\"]}}\nSubject: {{$json[\"subject\"]}}\nCompany: {{$json[\"company\"]}}\nRole: {{$json[\"job_role\"]}}\nFrom: {{$json[\"from\"]}}\n\nReply with:\n- know more {{$json[\"job_id\"]}}\n- generate resume {{$json[\"job_id\"]}}\n- skip {{$json[\"job_id\"]}}\n",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        976,
        160
      ],
      "id": "YOUR_NODE_ID",
      "name": "Send a text message1",
      "webhookId": "YOUR_WEBHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_API",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -672,
        800
      ],
      "id": "YOUR_NODE_ID",
      "name": "Telegram Trigger",
      "webhookId": "YOUR_WEHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_API",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract text safely\nconst text = $json[\"message\"]?.text?.trim() || \"\";\n\nif (!text) {\n  return {\n    json: {\n      action: \"unknown\",\n      job_id: \"unknown\"\n    }\n  };\n}\n\n// Split text into words\nconst parts = text.split(/\\s+/);\n\n// Determine action\nlet action = parts[0].toLowerCase();\nlet job_id_start_index = 1;\n\nif (parts[0]?.toLowerCase() === \"know\" && parts[1]?.toLowerCase() === \"more\") {\n  action = \"know more\";\n  job_id_start_index = 2;\n} else if (parts[0]?.toLowerCase() === \"generate\" && parts[1]?.toLowerCase() === \"resume\") {\n  action = \"generate resume\";\n  job_id_start_index = 2;\n}\n\n// Extract job_id\nconst job_id = parts.slice(job_id_start_index).join(\" \") || \"unknown\";\n\n// Return as single object\nreturn {\n  json: {\n    action,\n    job_id\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        800
      ],
      "id": "YOUR_NODE_ID",
      "name": "Code1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Code1').item.json.action.toLowerCase()}}",
                    "rightValue": "know more",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "YOUR_NODE_ID"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "YOUR_NODE_ID",
                    "leftValue": "={{ $('Code1').item.json.action.toLowerCase()}}",
                    "rightValue": "generate resume",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "YOUR_NODE_ID",
                    "leftValue": "={{ $('Code1').item.json.action.toLowerCase()}}",
                    "rightValue": "skip",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        688,
        784
      ],
      "id": "YOUR_NODE_ID",
      "name": "Switch"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_NUMBER",
          "mode": "id"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "job_id",
              "lookupValue": "={{$json[\"job_id\"]}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        368,
        800
      ],
      "id": "YOUR_NODE_ID",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  return {\n    json: {\n      text: (item.json.Subject || item.json.subject || \"\") + \" \" + (item.json.snippet || \"\")\n    }\n  };\n});\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        368
      ],
      "id": "YOUR_NODE_ID",
      "name": "Code2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract the company and job role from the following email text:\n\n{{ $json.text }}\n\nReturn the result strictly in valid JSON format with exactly these two keys:\n{\n  \"company\": \"<company name or 'Company not found'>\",\n  \"job_role\": \"<job role or 'Role not found'>\"\n}\n\nRules:\n- Do not include code fences, markdown, or extra text.\n- Output must be valid JSON only.\n",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -64,
        368
      ],
      "id": "YOUR_NODE_ID",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -144,
        176
      ],
      "id": "YOUR_NODE_ID",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "YOUR_GEMINI_API",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"company\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the company mentioned in the email or 'Company not found'\"\n    },\n    \"job_role\": {\n      \"type\": \"string\",\n      \"description\": \"The job role mentioned in the email or 'Role not found'\"\n    }\n  },\n  \"required\": [\"company\", \"job_role\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        48,
        112
      ],
      "id": "YOUR_NODE_ID",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const data = item.json;\n\n  return {\n    json: {\n      job_id: data.id,\n      subject: data.Subject,\n      from: data.From,\n      snippet: data.snippet,\n      company: data.output?.company,\n      job_role: data.output?.job_role,\n      status: \"Pending\",\n      timestamp: new Date().toISOString()\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        160
      ],
      "id": "YOUR_NODE_ID",
      "name": "Code3",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        272,
        -64
      ],
      "id": "YOUR_NODE_ID",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_NUMBER",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "={{ $json.action }}",
            "time stamp": "={{new Date().toISOString()}}",
            "job_id": "={{ $json.job_id }}"
          },
          "matchingColumns": [
            "job_id"
          ],
          "schema": [
            {
              "id": "job_id",
              "displayName": "job_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "from",
              "displayName": "from",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subject",
              "displayName": "subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job role",
              "displayName": "job role",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "time stamp",
              "displayName": "time stamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        64,
        800
      ],
      "id": "YOUR_NODE_ID",
      "name": "Update row in sheet",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1040,
        816
      ],
      "id": "YOUR_NODE_ID",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "YOUR_GEMINI_API",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_ID",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "YOUR_GOOGLE_SHEET_NUMBER",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "job_id": "={{$json[\"job_id\"]}}",
            "status": "skipped or not interested"
          },
          "matchingColumns": [
            "job_id"
          ],
          "schema": [
            {
              "id": "job_id",
              "displayName": "job_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "from",
              "displayName": "from",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subject",
              "displayName": "subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "company",
              "displayName": "company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job role",
              "displayName": "job role",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "time stamp",
              "displayName": "time stamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        944,
        1296
      ],
      "id": "YOUR_NODE_ID",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YOUR_GOOGLE_SHEETS_CREDENTIAL_ID",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a professional career assistant. Provide a detailed, factual, and unbiased summary of the following:\\njob_id: {{ $json.job_id }} \\nCompany: {{$json['company']}}\\nJob Role:{{ $json['job role'] }} \\nInclude key responsibilities, and required skills. Format clearly and output should not exceed 10 lines.",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1024,
        592
      ],
      "id": "YOUR_NODE_ID",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\"job_id\": \"123456\",\n\"company\": \"InLighnX Global Private Limited\",\n\"Job role\": \"Artificial Intelligence & Machine Learning Intern. This role supports the development and implementation of intelligent systems.\",\n\"Key Responsibilities\": \"Data preprocessing, model development, algorithm implementation, testing, and solution optimization.\",\n\"Required Skills\": \"Proficiency in Python, ML frameworks (TensorFlow/PyTorch), data analysis, basic statistics, and problem-solving.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1168,
        800
      ],
      "id": "YOUR_NODE_ID",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/customsearch/v1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "YOUR_GOOGLE_API_KEY"
            },
            {
              "name": "cx",
              "value": "YOUR_CUSTOM_SEARCH_ENGINE_ID"
            },
            {
              "name": "q",
              "value": "={{ $json.company }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        928,
        416
      ],
      "id": "YOUR_NODE_ID",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Take the first search result from HTTP node output\nconst firstItem = $input.first().json.items[0] || {};\n\n// Return only company website and snippet\nreturn [\n  {\n    json: {\n            job_id:$('Switch').first().json.job_id ,\n      company_website: firstItem.link || \"Not found\",\n      company_snippet: firstItem.snippet || \"Not found\"\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        416
      ],
      "id": "YOUR_NODE_ID",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "job_id",
              "field2": "output.job_id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1456,
        464
      ],
      "id": "YOUR_NODE_ID",
      "name": "Merge1"
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "=📢 Here's more information:\nJob ID: {{ $json.output.job_id }}\nCompany: {{ $json.output.company || \"Not found\"}}\nWebsite: {{ $json.company_website || \"Not found\"}}\nDescription: {{ $json.company_snippet || \"Not found\"}}\n\nJob Role:  {{ $json.output['Job role'] || \"Not found\"}}\nKey Responsibilities: {{ $json.output['Key Responsibilities']  || \"Not available\"}}\nSlills Required: {{ $json.output['Required Skills'] || \"Not available\" }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1664,
        464
      ],
      "id": "YOUR_NODE_ID",
      "name": "Send a text message",
      "webhookId": "YOUR_WEBHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_API",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert HR and resume writer. You create professional, ATS-friendly resumes in html format based on the following details: \\nJob Role: {{$json.output['Job role'] || \"Not found\"}} \\nInstructions:\\n- If the Job Role is 'Not found', generate a general resume highlighting skills, experience, and personal profile for a descent btech student.\\n- If Job Role is known, generate a role-specific resume tailored to that position, including relevant skills, projects, and achievements.\\n- Structure the resume professionally with headings: Objective, Skills, Experience/Projects, Education, Contact Info.\\n-. Do not give any instructions to use at the bottom and entire output should not exceed 25 lines",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1456,
        1232
      ],
      "id": "YOUR_NODE_ID",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1296,
        1424
      ],
      "id": "YOUR_NODE_ID",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "YOUR_GEMINI_API",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the raw HTML or markdown text from previous node\nlet resumeHtml = $input.first().json.text   || \"\";\n\n// Strip HTML tags and convert to plain text with Markdown styling\nconst convertToMarkdown = (html) => {\n    // Remove <style> and <script> content\n    html = html.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, \"\");\n    html = html.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, \"\");\n\n    // Replace headings with bold Markdown\n    html = html.replace(/<h1[^>]*>(.*?)<\\/h1>/gi, \"**$1**\\n\");\n    html = html.replace(/<h2[^>]*>(.*?)<\\/h2>/gi, \"\\n**$1**\\n\");\n    html = html.replace(/<h3[^>]*>(.*?)<\\/h3>/gi, \"\\n*$1*\\n\");\n\n    // Replace <li> with bullet points\n    html = html.replace(/<li[^>]*>(.*?)<\\/li>/gi, \"- $1\\n\");\n\n    // Replace paragraphs with line breaks\n    html = html.replace(/<p[^>]*>(.*?)<\\/p>/gi, \"$1\\n\");\n\n    // Remove remaining HTML tags\n    html = html.replace(/<[^>]+>/g, \"\");\n\n    // Decode HTML entities if needed\n    html = html.replace(/&nbsp;/gi, \" \");\n    html = html.replace(/&amp;/gi, \"&\");\n    html = html.replace(/&lt;/gi, \"<\");\n    html = html.replace(/&gt;/gi, \">\");\n    html = html.replace(/&quot;/gi, '\"');\n    html = html.replace(/&#39;/gi, \"'\");\n\n    return html.trim();\n};\n\nconst messageText = convertToMarkdown(resumeHtml);\n\nreturn [\n    {\n        json: {\n            message: messageText\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        1232
      ],
      "id": "YOUR_NODE_ID",
      "name": "Code4"
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "={{ $json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2096,
        1232
      ],
      "id": "YOUR_NODE_ID",
      "name": "Send a text message2",
      "webhookId": "YOUR_WEBHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_API",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        []
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2ca5d3aa-11c6-4fcc-95d0-e0e7728e8ab8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "YOUR_INSTANCE_ID"
  },
  "id": "YOUR_WORKFLOW_ID",
  "tags": []
}